{"version":3,"sources":["cmps/ui/rocket-128px.svg","graphql/queries/getPastLaunches.js","cmps/ui/load-and-error.jsx","services/util.js","views/LaunchesPast.jsx","views/LaunchDetails.jsx","graphql/mutations/addUser.js","graphql/queries/getUsers.js","cmps/Users.jsx","views/AddUser.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getPastLaunches","gql","rocketLoader","className","src","fatRocket","alt","rippleLoader","renderFetchError","renderMsgError","msg","role","formatUTCDate","d","split","shift","reverse","join","getMinyImage","url","substring","search","getImage","urlFromArray","length","LaunchesPast","query","data","loading","error","launchesPast","map","mission_name","launch_date_local","links","ships","rocket","id","key","to","process","flickr_images","image","home_port","rocket_name","GET_LAUNCH","LaunchDetails","useParams","useQuery","variables","launch","second_stage","payloads","manufacturer","orbit","payload_mass_kg","launchLocation","launch_site","site_name","details","year_built","active","img","i","target","rel","href","wikipedia","reddit_media","video_link","article_link","addUserMutation","getUsers","Users","users","user","name","twitter","AddUser","formRef","useRef","useMutation","addUser","useState","showError","setShowError","inputs","setInputs","changeInput","value","handleSubmit","ev","a","preventDefault","typeCheck","varible","wanted","setTimeout","objects","current","reset","console","log","ref","onSubmit","htmlFor","disabled","onChange","type","renderSavingMessage","renderPostError","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,0C,+iCCE3C,IAoCeC,EApCSC,IAAH,K,+BCKRC,EAAe,WACxB,OACI,yBAAKC,UAAU,SAASC,IAAKC,IAAWC,IAAI,iBAGvCC,EAAe,WACxB,OACI,yBAAKJ,UAAU,cAAf,IAA6B,8BAA7B,IAAyC,8BAAzC,MA0BKK,EAAmB,WAC5B,OACI,yBAAKL,UAAU,sBAAf,yBAKKM,EAAiB,SAACC,GAA0B,IAArBC,EAAoB,uDAAb,SACvC,OACI,yBAAKR,UAAW,eAAiBQ,GAC5BD,IClDAE,EAAgB,SAACC,GAC5B,GAAKA,EACL,OAAOA,EACJC,MAAM,KACNC,QACAD,MAAM,KACNE,UACAC,KAAK,MAIGC,EAAe,SAACC,GAC3B,OAAOA,GAAOA,EAAIC,UAAU,EAAGD,EAAIE,OAAO,QAAU,GAAK,SAI9CC,EAAW,WAA6B,IAA5BC,EAA2B,uDAAZ,GAAIJ,EAAQ,uCAClD,OAAOI,EAAaC,OAAS,EACzBN,EAAaK,EAAa,IAC1BL,EAAaC,IC0CJM,EAnDM,WAEnB,OACE,kBAAC,IAAD,CAAOC,MAAO1B,IACX,YAA+B,IAA5B2B,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACjB,OAAID,EAAiB1B,IACjB2B,EAAerB,IAGjB,yBAAKL,UAAU,aACZwB,EAAKG,aAAaC,KACjB,gBACEC,EADF,EACEA,aACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,MACAC,EAJF,EAIEA,MACAC,EALF,EAKEA,OACAC,EANF,EAMEA,GANF,OAQE,yBAAKlC,UAAU,iBAAiBmC,IAAKD,GACnC,kBAAC,IAAD,CAAME,GAAIC,wCAAmCH,GAC7C,4BAAQlC,UAAU,cAChB,0BAAMA,UAAU,QACb,IACAS,EAAcqB,IAGjB,yBAEE7B,IAAKkB,EAAUY,EAAMO,cAAeN,EAAMO,OAC1CpC,IAAK6B,EAAMQ,cAIf,wBAAIxC,UAAU,cAAc6B,GAC5B,0BAAM7B,UAAU,aACTiC,EAAOQ,YADd,cAGCT,EAAMQ,WACL,0BAAMxC,UAAU,aAAhB,UAAoCgC,EAAMQ,oB,orBCtC9D,IAAME,EAAa5C,IAAH,KA+GD6C,EA1EO,WAAO,IACnBT,EAAOU,cAAPV,GADkB,EAEOW,YAASH,EAAY,CAACI,UAAW,CAACZ,QAA3DT,EAFkB,EAElBA,QAASC,EAFS,EAETA,MAAOF,EAFE,EAEFA,KAExB,GAAIC,EAAS,OAAO1B,IACpB,GAAI2B,EAAO,OAAOrB,IALQ,IAMnB0C,EAAUvB,EAAVuB,OANmB,EAOqBA,EAAOd,OAAOe,aAAaC,SAAnEC,EAPmB,EAOnBA,aAAcC,EAPK,EAOLA,MAAOC,EAPF,EAOEA,gBACtBC,EAAiBN,EAAOf,MAAMQ,WAAaO,EAAOO,YAAYC,UACpE,OACE,yBAAKvD,UAAU,oBACb,yBAAKA,UAAU,0BACb,wBAAIA,UAAU,cAAd,YAAqC+C,EAAOlB,aAC5C,0BAAM7B,UAAU,aAAhB,KAA+BS,EAAcsC,EAAOjB,qBAEpD,wBAAI9B,UAAU,eAAd,mBACA,2BAAI+C,EAAOS,SACX,yCAAeT,EAAOd,OAAOQ,YACxBU,EAAQ,qBAAsBA,EAAQ,GAD3C,IAEKE,EAAkB,SAAWA,EAAiB,GAC9CD,EAAkB,sBAAuBA,EAAkB,GAHhE,iBAKiBL,EAAOf,MAAMyB,WACxBP,EAAe,MAAQA,EAAe,GAN5C,uBAOyBH,EAAOf,MAAM0B,OAAS,UAAW,cAP1D,KAUA,yBAAK1D,UAAU,cACV+C,EAAOhB,MAAMO,eAAiBS,EAAOhB,MAAMO,cAAcV,KAAI,SAAC+B,EAAKC,GAAN,OAC9D,4BAAQ5D,UAAU,aAAamC,IAAKyB,GAChC,yBACA3D,IAAKc,EAAa4C,GAClBxD,IAAK4C,EAAOlB,aAAe,uBAKnC,yBAAK7B,UAAU,SACf,8CACA,uBACE6D,OAAO,SACPC,IAAI,sBACJC,KAAMhB,EAAOhB,MAAMiC,WAHrB,aAOA,uBACEH,OAAO,SACPC,IAAI,sBACJC,KAAMhB,EAAOhB,MAAMkC,cAHrB,UAOA,uBACEJ,OAAO,SACPC,IAAI,sBACJC,KAAMhB,EAAOhB,MAAMmC,YAHrB,SAOA,uBACEL,OAAO,SACPC,IAAI,sBACJC,KAAMhB,EAAOhB,MAAMoC,cAHrB,iB,8OCzGR,IAQeC,EARStE,IAAH,K,iOCArB,IAUeuE,EAVEvE,IAAH,KCoCCwE,G,MA3BD,WAAO,IAAD,EACgBzB,YAASwB,GAAnC7C,EADU,EACVA,KAAMC,EADI,EACJA,QAASC,EADL,EACKA,MACvB,OAAID,EAAgBrB,IAChBsB,EAAcrB,IACbmB,EAGH,oCAEA,yBAAKxB,UAAU,uBACP,0BAAMA,UAAU,oBAAhB,WACA,0BAAMA,UAAU,oBAAhB,gBACA,0BAAMA,UAAU,oBAAhB,cAGPwB,EAAK+C,OAAS/C,EAAK+C,MAAM3C,KAAK,SAAC4C,EAAMZ,GAAP,OAC7B,yBAAK5D,UAAU,aAAamC,IAAKyB,GAE3B,0BAAM5D,UAAU,eAAhB,IAAgCwE,EAAKC,KAArC,KACA,kCAAQD,EAAKvC,OAAb,KACA,kCAAQuC,EAAKE,QAAb,UAhBQpE,EAAe,YAAY,aCuEhCqE,EA9EC,WACZ,IAAMC,EAAUC,mBADE,EAEkBC,YAAYV,GAF9B,mBAEXW,EAFW,YAEDtD,EAFC,EAEDA,QAASC,EAFR,EAEQA,MAFR,EAGgBsD,oBAAS,GAHzB,mBAGXC,EAHW,KAGAC,EAHA,OAWMF,mBAAS,IAXf,mBAWfG,EAXe,KAWPC,EAXO,KAahBC,EAAc,SAAC,GAAiC,IAAD,IAA9BxB,OAAUY,EAAoB,EAApBA,KAAMa,EAAc,EAAdA,MACnCF,EAAU,eAAKD,EAAN,eAAeV,EAAOa,MAG7BC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACjBD,EAAGE,iBACGC,EAAY,SAACC,EAASC,GAAV,cAA4BD,IAAYC,GACrDV,EAAOV,OAAQkB,EAAUR,EAAOV,KAAM,WACtCU,EAAOlD,SAAW0D,EAAUR,EAAOlD,OAAQ,UAJ/B,uBAKbiD,GAAa,GAEbY,YAAW,WACPZ,GAAa,KACd,MATU,oDAcTH,EAAQ,CACZjC,UAAW,CACTiD,QAAS,CACP,CAAEtB,KAAMU,EAAOV,KAAMxC,OAAQkD,EAAOlD,YAjB3B,QAXfmD,EAAU,IACVR,EAAQoB,QAAQC,QAUD,kDAwBbC,QAAQC,IAAR,MAxBa,0DAAH,sDA6BhB,OACI,yBAAKnG,UAAU,kBACjB,0BACEA,UAAU,QACVoG,IAAKxB,EACLyB,SAAQ,uCAAE,WAAOb,GAAP,SAAAC,EAAA,+EAAcF,EAAaC,IAA3B,2CAAF,uDACR,2BAAOc,QAAQ,QAAf,QAEE,2BAAOC,SAAU9E,EAAS+E,SAAU,SAAChB,GAAD,OAAQH,EAAYG,IAAKiB,KAAK,OAAOhC,KAAK,UAEhF,2BAAO6B,QAAQ,UAAf,wBAEE,2BAAOC,SAAU9E,EAAS+E,SAAU,SAAChB,GAAD,OAAQH,EAAYG,IAAKiB,KAAK,OAAOhC,KAAK,YAGhF,2BAAO6B,QAAQ,WAAf,WAEE,2BAAOC,SAAU9E,EAAS+E,SAAU,SAAChB,GAAD,OAAQH,EAAYG,IAAKiB,KAAK,OAAOhC,KAAK,aAGhF,4BAAQgC,KAAK,UAAb,IAAyBhF,EAAUrB,IAAgB,QACnD6E,GAAa3E,EAAe,4DAA4D,YAExFmB,GP3D6B,WAAuB,IAAtBlB,EAAqB,uDAAf,WACtC,OACI,yBAAKP,UAAU,oBAAf,UACYO,EADZ,OOyDSmG,GACXhF,GP/CyB,WAAsC,IAArCnB,EAAoC,uDAA9B,0BAClC,OACI,yBAAKP,UAAU,sBAAf,sBACwBO,EADxB,KO6COoG,GACT,6BACE,kBAAC,EAAD,SCvEFC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,qCA8CQC,MA3Cf,WACE,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAK5G,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBAEE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMoC,GAAIC,kCAAV,SAEF,4BACE,kBAAC,IAAD,CAAMD,GAAIC,0CAAV,iBAQV,yBAAKrC,UAAU,iBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEgH,OAAK,EACLC,KAAM5E,iCACN6E,UAAW5F,IAEb,kBAAC,IAAD,CACE2F,KAAM5E,2CACN6E,UAAWvE,IAEb,kBAAC,IAAD,CACEsE,KAAM5E,yCACN6E,UAAWvC,SCpCLwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzG,GACLwE,QAAQxE,MAAMA,EAAM0G,c","file":"static/js/main.5de790d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rocket-128px.69a6a822.svg\";","import gql from 'graphql-tag';\r\n\r\nconst getPastLaunches = gql`\r\n  query getPastLaunches( $limit: Int = 8, $offset: Int = 0  ){\r\n    launchesPast(limit: $limit, offset: $offset) {\r\n      id\r\n      mission_name\r\n      launch_date_local\r\n      links {\r\n        article_link\r\n        video_link\r\n        flickr_images\r\n      }\r\n      rocket {\r\n        rocket_name\r\n        first_stage {\r\n          cores {\r\n            core {\r\n              status\r\n            }\r\n          }\r\n        }\r\n        #   second_stage {\r\n        #     payloads {\r\n        #       payload_type\r\n        #       payload_mass_kg\r\n        #       payload_mass_lbs\r\n        #     }\r\n        #   }\r\n      }\r\n      ships {\r\n        home_port\r\n        # image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default getPastLaunches;","import React from 'react';\r\nimport './loader.css';\r\nimport './error.css';\r\nimport fatRocket from './rocket-128px.svg';\r\n\r\n// LOADING\r\n\r\nexport const rocketLoader = () => {\r\n    return (\r\n        <img className=\"rocket\" src={fatRocket} alt=\"loader-icon\" />\r\n      );\r\n}\r\nexport const rippleLoader = () => {\r\n    return (\r\n        <div className=\"lds-ripple\"> <div></div> <div></div> </div>\r\n        );\r\n}\r\n\r\n\r\nexport const renderSavingMessage = (msg = 'new user') => {\r\n    return (\r\n        <div className=\"alert alert-info\">\r\n            Saving {msg}...\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n// ERROR\r\n// role = danger / warning\r\nexport const renderPostError = (msg = 'Unable to save the user') => {\r\n    return (\r\n        <div className=\"alert alert-danger\">\r\n            An error occurred! {msg}.\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const renderFetchError = () => {\r\n    return (\r\n        <div className=\"alert alert-danger\">\r\n            Something went wrong \r\n        </div>\r\n    );\r\n};\r\nexport const renderMsgError = (msg ,role = 'danger') => {\r\n    return (\r\n        <div className={\"alert alert-\" + role}>\r\n            {msg}\r\n        </div>\r\n    );\r\n};\r\n\r\n","export const formatUTCDate = (d) => {\r\n  if (!d) return;\r\n  return d\r\n    .split('T') // split on the \"T\"   -> [\"2015-11-09\", \"10:...\"]\r\n    .shift() // get the first part -> \"2015-11-09\"\r\n    .split('-') // split again on \"-\" -> [\"2015\", \"11\", \"09\"]\r\n    .reverse() // reverse the array  -> [\"09\", \"11\", \"2015\"]\r\n    .join('/'); // join with \"/\"      -> \"09/11/2015\"\r\n};\r\n\r\n// change flicker image size\r\nexport const getMinyImage = (url) => {\r\n  return url && url.substring(0, url.search('.jpg') - 1) + 'c.jpg';\r\n};\r\n\r\n// change Image size\r\nexport const getImage = (urlFromArray = [], url) => {\r\n  return urlFromArray.length > 0\r\n    ? getMinyImage(urlFromArray[0])\r\n    : getMinyImage(url);\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// graphql\r\nimport { Query } from 'react-apollo';\r\nimport getPastLaunches from \"../graphql/queries/getPastLaunches\";\r\n// self\r\nimport {rocketLoader, renderFetchError} from '../cmps/ui/load-and-error.jsx';\r\nimport { formatUTCDate, getImage } from '../services/util';\r\n\r\n\r\nconst LaunchesPast = () => {\r\n\r\n  return (\r\n    <Query query={getPastLaunches  }>\r\n      {({ data, loading, error }) => {\r\n        if (loading) return  rocketLoader()\r\n        if (error)  return renderFetchError()\r\n\r\n        return (\r\n          <div className=\"container\">\r\n            {data.launchesPast.map(\r\n              ({\r\n                mission_name,\r\n                launch_date_local,\r\n                links,\r\n                ships,\r\n                rocket,\r\n                id,\r\n              }) => (\r\n                <div className=\"card --lunches\" key={id}>\r\n                  <Link to={process.env.PUBLIC_URL +\"/launch/\"+id} >\r\n                  <figure className=\"card-photo\">\r\n                    <span className=\"date\">\r\n                      {' '}\r\n                      {formatUTCDate(launch_date_local)}\r\n                    </span>\r\n\r\n                    <img\r\n                    //   src = {}\r\n                      src={getImage( links.flickr_images, ships.image)}\r\n                      alt={ships.home_port}\r\n                    />\r\n                  </figure>\r\n                  </Link>\r\n                  <h3 className=\"card-title\">{mission_name}</h3>\r\n                  <span className=\"card-desc\"> \r\n                        {rocket.rocket_name} as rocket\r\n                  </span>\r\n                  {ships.home_port && (\r\n                    <span className=\"card-desc\"> from: {ships.home_port}</span>\r\n                  )}\r\n                </div>\r\n              )\r\n            )}\r\n          </div>\r\n        );\r\n      }}\r\n    </Query>\r\n  );\r\n};\r\n\r\nexport default LaunchesPast;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// graphql\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport gql from 'graphql-tag';\r\n// self\r\nimport { rocketLoader, renderFetchError } from '../cmps/ui/load-and-error.jsx';\r\nimport { formatUTCDate, getMinyImage } from '../services/util';\r\nimport './launch-details.css';\r\n\r\nconst GET_LAUNCH = gql`\r\n  query GetLaunch($id: ID!) {\r\n    launch(id: $id) {\r\n      mission_name\r\n      rocket {\r\n        second_stage {\r\n          payloads {\r\n            orbit\r\n            payload_mass_kg\r\n            manufacturer\r\n          }\r\n        }\r\n        rocket_name\r\n      }\r\n      ships {\r\n        home_port\r\n        year_built\r\n        name\r\n        active\r\n      }\r\n      launch_site {\r\n        site_name\r\n      }\r\n      launch_year\r\n      links {\r\n        flickr_images\r\n        reddit_media\r\n        video_link\r\n        article_link\r\n        wikipedia\r\n      }\r\n      details\r\n      launch_date_local\r\n    }\r\n  }\r\n`;\r\n\r\nconst LaunchDetails = () => {\r\n  const { id } = useParams();\r\n  const { loading, error, data } = useQuery(GET_LAUNCH, {variables: {id}});\r\n    \r\n  if (loading) return rocketLoader();\r\n  if (error) return renderFetchError(error);\r\n  const {launch} = data\r\n  const {manufacturer, orbit, payload_mass_kg} = launch.rocket.second_stage.payloads\r\n  const launchLocation = launch.ships.home_port || launch.launch_site.site_name\r\n  return (\r\n    <div className=\"container middle\">\r\n      <div className=\"card --lunches-details\">\r\n        <h1 className=\"card-title\">mission: {launch.mission_name}\r\n        <span className=\"card-desc\">  {formatUTCDate(launch.launch_date_local)}</span>\r\n        </h1>\r\n        <h2 className=\"capitalized\"> Launch Details</h2>\r\n        <p>{launch.details}</p>\r\n        <p>The rocket {launch.rocket.rocket_name} \r\n            {orbit ? ' fly on the orbit '+ orbit : '' },\r\n            {launchLocation ?  ' from ' + launchLocation : ''}\r\n            {payload_mass_kg ? ' with self mass of '+ payload_mass_kg : '' }\r\n            . \r\n            It built on {launch.ships.year_built}\r\n            { manufacturer ? 'by ' + manufacturer : ''}\r\n            and currently it is {launch.ships.active ? ' active': ' not active'}\r\n            .\r\n        </p>\r\n        <div className=\"photo-grid\">\r\n            {launch.links.flickr_images && launch.links.flickr_images.map((img, i) => (\r\n            <figure className=\"card-photo\" key={i}>\r\n                <img\r\n                src={getMinyImage(img)}\r\n                alt={launch.mission_name + 'on luanch day'}\r\n                />\r\n            </figure>\r\n            ))}\r\n        </div>\r\n        <div className=\"links\">\r\n        <span>more info:  </span>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href={launch.links.wikipedia}\r\n        >\r\n          wikipedia\r\n        </a>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href={launch.links.reddit_media}\r\n        >\r\n          reddit \r\n        </a>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href={launch.links.video_link}\r\n        >\r\n          video \r\n        </a>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href={launch.links.article_link}\r\n        >\r\n          article/s\r\n        </a>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchDetails;\r\n","import gql from 'graphql-tag';\r\n\r\n\r\nconst addUserMutation = gql`\r\nmutation addUser($objects: [users_insert_input!]!) {\r\n  insert_users(objects: $objects) {\r\n    affected_rows\r\n  }\r\n}\r\n`;\r\n\r\nexport default addUserMutation","import gql from 'graphql-tag';\r\n\r\n\r\nconst getUsers = gql`\r\n  query getUsers( $limit: Int = 10, $offset: Int = 0  ){\r\n    users(limit: $limit, offset: $offset) {\r\n      twitter\r\n      rocket\r\n      name\r\n    }\r\n}\r\n`;\r\n\r\nexport default getUsers;","import React from 'react';\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport getUsers from '../graphql/queries/getUsers';\r\n// UI\r\nimport './users.css';\r\nimport {\r\n  rippleLoader,\r\n  renderFetchError,\r\n  renderMsgError,\r\n} from './ui/load-and-error';\r\n\r\nconst Users = () => {\r\n  const { data, loading, error  } = useQuery(getUsers);\r\n  if (loading) return rippleLoader();\r\n  if (error) return renderFetchError();\r\n  if (!data) return renderMsgError('Not Found','warning') ;\r\n\r\n  return (\r\n    <>\r\n\r\n    <div className=\"users-grid --header\">\r\n            <span className=\"capitalized bold\"> name  </span>\r\n            <span className=\"capitalized bold\"> rocket name</span>\r\n            <span className=\"capitalized bold\"> twitter </span>\r\n    </div>\r\n    \r\n    {data.users && data.users.map( (user, i) => \r\n      <div className=\"users-grid\" key={i}>\r\n            \r\n            <span className=\"capitalized\"> {user.name} </span>\r\n            <span> {user.rocket} </span>\r\n            <span> {user.twitter} </span>\r\n      </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React, { useState, useRef } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport addUserMutation  from \"../graphql/mutations/addUser\";\r\n//self\r\nimport Users from \"../cmps/Users\";\r\n// UI\r\nimport {renderSavingMessage, rippleLoader, renderPostError, renderMsgError} from '../cmps/ui/load-and-error.jsx';\r\n\r\n\r\nconst AddUser = () => {\r\n    const formRef = useRef();\r\n    const [addUser, {loading, error}] = useMutation(addUserMutation);\r\n    const [showError, setShowError] = useState(false)\r\n\r\n    const resetFields = () => {\r\n      setInputs({});\r\n      formRef.current.reset();\r\n  };\r\n\r\n\r\nconst [inputs, setInputs] = useState({});\r\n\r\nconst changeInput = ({ target: { name, value } }) => {\r\n    setInputs({ ...inputs, [name]: value });\r\n  };\r\n\r\nconst handleSubmit = async (ev) => {\r\n    ev.preventDefault();\r\n    const typeCheck = (varible, wanted) => typeof varible === wanted\r\n    if (!inputs.name || typeCheck(inputs.name, 'String') || \r\n        !inputs.rocket  || typeCheck(inputs.rocket, 'String')) {\r\n        setShowError(true);\r\n        // create kind of Toast for example\r\n        setTimeout(() => {\r\n            setShowError(false);\r\n        }, 2800);\r\n        return\r\n    } ;\r\n\r\n    try {\r\n      await addUser({\r\n        variables: {\r\n          objects: [\r\n            { name: inputs.name, rocket: inputs.rocket },\r\n          ],\r\n        },\r\n      });\r\n      resetFields();\r\n     \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n  /// UI :\r\n  return (\r\n      <div className=\"container wide\">\r\n    <form\r\n      className=\"users\"\r\n      ref={formRef}\r\n      onSubmit={async (ev) => handleSubmit(ev)}>\r\n      <label htmlFor=\"name\">\r\n        name:\r\n        <input disabled={loading} onChange={(ev) => changeInput(ev)} type=\"text\" name=\"name\" />\r\n      </label>\r\n      <label htmlFor=\"rocket\">\r\n        rocket name propusal:\r\n        <input disabled={loading} onChange={(ev) => changeInput(ev)} type=\"text\" name=\"rocket\" />\r\n      </label>\r\n\r\n      <label htmlFor=\"twitter\">\r\n        twitter:\r\n        <input disabled={loading} onChange={(ev) => changeInput(ev)} type=\"text\" name=\"twitter\" />\r\n      </label>\r\n\r\n      <button type=\"submit\"> { loading ? rippleLoader(): 'send' }</button>\r\n     {showError && renderMsgError(' Please provide name and rocket name, only string allowed','warning')}\r\n    </form>\r\n     {loading && renderSavingMessage()}\r\n     {error && renderPostError()}\r\n      <div>\r\n        <Users/>\r\n      </div>\r\n     </div>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\n\r\nimport LaunchesPast from './views/LaunchesPast';\r\nimport LaunchDetails from './views/LaunchDetails';\r\nimport AddUser from './views/AddUser';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://api.spacex.land/graphql/',\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            SpaceX Graph-QL\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <Link to={process.env.PUBLIC_URL + '/'}>Home</Link>\r\n                </li>\r\n                <li>\r\n                  <Link to={process.env.PUBLIC_URL + '/add-user'}>\r\n                    Add User\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </header>\r\n        </div>\r\n        <div className=\"App-container\">\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path={process.env.PUBLIC_URL + '/'}\r\n              component={LaunchesPast}\r\n            />\r\n            <Route\r\n              path={process.env.PUBLIC_URL + '/launch/:id'}\r\n              component={LaunchDetails}\r\n            />\r\n            <Route\r\n              path={process.env.PUBLIC_URL + '/add-user'}\r\n              component={AddUser}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}